{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","setRandomQuoteFromApi","a","fetch","raw_response","json","response","quotes_list","quotes","lenght_quotes_list","length","randomIndex","Math","floor","random","setState","randomQuote","quote","randomAuthor","author","state","primaryColor","quoteStyle","openingQuoteMarkStyle","closingQuoteMarkStyle","authorStyle","bind","setRandomBackgroundColor","callToSetRandomQuoteAndColor","colorString","this","setTimeout","className","style","backgroundColor","id","height","position","top","fontSize","color","bottom","width","href","onClick","Component","Boolean","window","location","hostname","match","FCCValidationScript","document","createElement","setAttribute","head","appendChild","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,kC,yKC4I5BC,G,mEArIb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAuBRC,sBAxBkB,sBAwBM,oCAAAC,EAAA,sEAEGC,MAAM,0IAFT,cAElBC,EAFkB,gBAGDA,EAAaC,OAHZ,OAGlBC,EAHkB,OAIlBC,EAAcD,EAASE,OAEvBC,EAAqBF,EAAYG,OAEjCC,EAAcC,KAAKC,MAAOD,KAAKE,UAAUL,EAAmB,GAAG,GAInE,EAAKM,SAAS,CACZC,YAAYT,EAAYI,GAAaM,MACrCC,aAAaX,EAAYI,GAAaQ,SAdlB,4CArBtB,EAAKC,MAAQ,CAECC,aAAe,QACfL,YAAY,gDACZE,aAAa,QACbI,WAAY,uBACZC,sBAAuB,iCACvBC,sBAAuB,kCACvBC,YAAa,0DAIzB,EAAKxB,sBAAwB,EAAKA,sBAAsByB,KAA3B,gBAC7B,EAAKC,yBAA2B,EAAKA,yBAAyBD,KAA9B,gBAChC,EAAKE,6BAA+B,EAAKA,6BAA6BF,KAAlC,gBAjBtB,E,uEAgDhB,IAIIG,EAAc,OAJM,IAAdjB,KAAKE,SAIG,YAElBgB,KAAKf,SAAS,CAACM,aAAaQ,M,qDAMC,IAAD,OAG5BC,KAAKf,SAAS,CACZO,WAAWQ,KAAKV,MAAME,WAAW,oBACjCC,sBAAsBO,KAAKV,MAAMG,sBAAsB,oBACvDC,sBAAsBM,KAAKV,MAAMI,sBAAsB,oBACvDC,YAAYK,KAAKV,MAAMK,YAAY,sBAMrCM,YAAW,WAAK,EAAKhB,SAAS,CAE5BO,WAAY,uBACZC,sBAAuB,iCACvBC,sBAAuB,kCACvBC,YAAa,6DAEX,MAEJK,KAAK7B,wBACL6B,KAAKH,6B,+BAQL,OAEA,yBAAKK,UAAU,uCAAuCC,MAAO,CAACC,gBAAgBJ,KAAKV,MAAMC,eAEvF,yBAAKW,UAAU,uFAAuFG,GAAG,YAAYF,MAAO,CAACG,OAAO,OAAOC,SAAS,WAAWC,IAAI,QAEjK,uBAAGN,UAAU,aAGX,uBAAGA,UAAWF,KAAKV,MAAMG,sBAAuBU,MAAO,CAACM,SAAS,SAASC,MAAMV,KAAKV,MAAMC,gBAG3F,0BAAMW,UAAWF,KAAKV,MAAME,WAAYW,MAAO,CAACO,MAAMV,KAAKV,MAAMC,cAAec,GAAG,QAASL,KAAKV,MAAMJ,aAGvG,uBAAGgB,UAAWF,KAAKV,MAAMI,sBAAuBS,MAAO,CAACM,SAAS,SAASC,MAAMV,KAAKV,MAAMC,iBAK7F,uBAAGW,UAAWF,KAAKV,MAAMK,YAAaU,GAAG,SAASF,MAAO,CAACI,SAAS,WAAWI,OAAO,OAAOD,MAAMV,KAAKV,MAAMC,eAA7G,IAA8HS,KAAKV,MAAMF,cAEzI,6BAGA,yBAAKc,UAAU,mBAEb,4BAASA,UAAU,iCAAiCC,MAAO,CAACS,MAAM,OAAOR,gBAAgBJ,KAAKV,MAAMC,eAAe,uBAAGc,GAAG,cAAcQ,KAAI,qFAAgFb,KAAKV,MAAMJ,cAAe,uBAAGgB,UAAU,gBAAgBC,MAAO,CAACM,SAAS,SAASC,MAAM,aAGlT,4BAAQR,UAAU,iCAAiCC,MAAO,CAACS,MAAM,OAAOR,gBAAgBJ,KAAKV,MAAMC,eAAe,uBAAGsB,KAAI,kHAA6Gb,KAAKV,MAAMJ,YAAxH,4CAA8K,uBAAGgB,UAAU,eAAeC,MAAO,CAACM,SAAS,SAASC,MAAM,aAGnW,4BAAQL,GAAG,YAAYH,UAAU,2DAA2DC,MAAO,CAACS,MAAM,SAASR,gBAAgBJ,KAAKV,MAAMC,aAAamB,MAAM,SAAUI,QAASd,KAAKF,8BAA8B,0BAAMI,UAAU,gBAAhB,qB,GA7H/Ma,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAIC,EAAsBC,SAASC,cAAc,UACjDF,EAAoBG,aAAa,MAAM,mEACvCF,SAASG,KAAKC,YAAYL,GAE1BM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASQ,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e9bff8ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n\n                  primaryColor : 'brown',\n                  randomQuote:'Every strike brings me closer to the home run',\n                  randomAuthor:'Pavan',\n                  quoteStyle: \"h3 p-4 bg-transition\",\n                  openingQuoteMarkStyle: \"fa fa-quote-left bg-transition\",\n                  closingQuoteMarkStyle: \"fa fa-quote-right bg-transition\",\n                  authorStyle: \"float-right pr-4 pt-2 font-weight-normal bg-transition\"\n                  \n                }\n\n      this.setRandomQuoteFromApi = this.setRandomQuoteFromApi.bind(this);\n      this.setRandomBackgroundColor = this.setRandomBackgroundColor.bind(this);\n      this.callToSetRandomQuoteAndColor = this.callToSetRandomQuoteAndColor.bind(this);\n\n  }\n\n  \n\n// Fetch quotes from API and set a random one to the state\n  setRandomQuoteFromApi = async() =>{\n    \n    let raw_response = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n    let response = await raw_response.json();\n    let quotes_list = response.quotes;\n\n    let lenght_quotes_list = quotes_list.length;\n\n    let randomIndex = Math.floor( Math.random()*(lenght_quotes_list-1)+1 ); \n\n    \n   \n    this.setState({\n      randomQuote:quotes_list[randomIndex].quote,\n      randomAuthor:quotes_list[randomIndex].author\n    })\n\n\n  }\n      \n\n  // Create a random hsl color code and set it to the state\n  setRandomBackgroundColor(){\n\n    let hue = Math.random()*360;\n    let saturation = '70%';\n    let lightness =  '50%';\n\n    let colorString = 'hsl('+hue+','+saturation+','+lightness+')';\n\n    this.setState({primaryColor:colorString}) \n\n  }\n\n  // When the 'New Quote' button is clicked, it will internally call the get quote and get random color functions and update the state.\n  // We are also adding the transition class to have the fade effect and removing the class after animation completes via setTimeout\n  callToSetRandomQuoteAndColor(){\n    \n    // Add transition class to the ui objects like quotation mark, quote and author\n    this.setState({\n      quoteStyle:this.state.quoteStyle+' quote-transition',\n      openingQuoteMarkStyle:this.state.openingQuoteMarkStyle+' quote-transition',\n      closingQuoteMarkStyle:this.state.closingQuoteMarkStyle+' quote-transition',\n      authorStyle:this.state.authorStyle+' quote-transition',\n  \n  })\n\n  // Once the fade animation completes, we are removing the transition class in the state.\n  // This is required to achieve the toggle fade effect on every 'New Quote' button click.\n    setTimeout(()=>{this.setState({\n\n      quoteStyle: \"h3 p-4 bg-transition\",\n      openingQuoteMarkStyle: \"fa fa-quote-left bg-transition\",\n      closingQuoteMarkStyle: \"fa fa-quote-right bg-transition\",\n      authorStyle: \"float-right pr-4 pt-2 font-weight-normal bg-transition\"\n\n    })},2200)\n\n    this.setRandomQuoteFromApi(); \n    this.setRandomBackgroundColor();\n      \n  }\n\n\n  render(){\n    \n    \n    return (\n    \n    <div className=\"container-fluid vh-100 bg-transition\" style={{backgroundColor:this.state.primaryColor}}>\n\n      <div className=\"col-sm-12 col-lg-4 bg-black rounded mx-auto text-center p-3 bg-white quote-container\" id=\"quote-box\" style={{height:'auto',position:'relative',top:'37%'}}>\n      \n        <p className=\"col-md-12\">\n\n          {/* Opening quotation mark */}\n          <i className={this.state.openingQuoteMarkStyle} style={{fontSize:'1.5rem',color:this.state.primaryColor}} />\n          \n          {/* Quote */}\n          <span className={this.state.quoteStyle} style={{color:this.state.primaryColor}} id=\"text\" >{this.state.randomQuote}</span>\n       \n          {/* Closing quotation mark */}\n          <i className={this.state.closingQuoteMarkStyle} style={{fontSize:'1.5rem',color:this.state.primaryColor}} />\n       </p>\n        \n\n        {/* Author Name */}\n        <p className={this.state.authorStyle} id=\"author\" style={{position:'relative',bottom:'1rem',color:this.state.primaryColor}}>-{this.state.randomAuthor}</p>\n        \n        <br />\n\n        {/* Buttons */}\n        <div className='btn-group w-100'> \n          {/* Twitter button */}\n          <button  className=\"rounded ml-2 p-0 bg-transition\" style={{width:'3rem',backgroundColor:this.state.primaryColor}}><a id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${this.state.randomQuote}`}><i className=\"fa fa-twitter\" style={{fontSize:'1.5rem',color:'white'}}></i></a></button>\n          \n          {/* Tumblr button */}\n          <button className=\"rounded ml-2 p-0 bg-transition\" style={{width:'3rem',backgroundColor:this.state.primaryColor}}><a href={`https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=Jesus&content=${this.state.randomQuote}buttons&shareSource=tumblr_share_button`}><i className=\"fa fa-tumblr\" style={{fontSize:'1.5rem',color:'white'}}></i></a></button>\n          \n          {/* New Quote button  */}\n          <button id=\"new-quote\" className=\"float-right ml-auto px-2 py-1 mr-2 rounded bg-transition\" style={{width:'6.5rem',backgroundColor:this.state.primaryColor,color:'white'}} onClick={this.callToSetRandomQuoteAndColor}><span className=\"align-center\">New Quote</span></button>\n        </div>\n      </div>\n      \n    </div>);\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.min.css'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n//Adding the FreeCodeCamp validation script\n\nvar FCCValidationScript = document.createElement('script');  \nFCCValidationScript.setAttribute('src','https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js');\ndocument.head.appendChild(FCCValidationScript);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}